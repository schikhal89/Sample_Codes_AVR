
mainLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000372  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800122  00000394  00000408  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000d7  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000334  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000015d  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000031e  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000100  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016a  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  c6:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <toggleE>:
	WaitMs(15);
		
}

void toggleE(void)
{
  ce:	da 9a       	sbi	0x1b, 2	; 27
  d0:	90 91 22 01 	lds	r25, 0x0122
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <toggleE+0xe>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	9a e0       	ldi	r25, 0x0A	; 10
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
  dc:	8a 3f       	cpi	r24, 0xFA	; 250
  de:	e0 f3       	brcs	.-8      	; 0xd8 <toggleE+0xa>
  e0:	90 93 22 01 	sts	0x0122, r25
  e4:	80 93 23 01 	sts	0x0123, r24

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
  e8:	da 98       	cbi	0x1b, 2	; 27
}
  ea:	08 95       	ret

000000ec <dely_ns>:

void dely_ns(unsigned char tim)
{
  ec:	20 91 22 01 	lds	r18, 0x0122
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	2a e0       	ldi	r18, 0x0A	; 10
  f8:	98 17       	cp	r25, r24
  fa:	e0 f3       	brcs	.-8      	; 0xf4 <dely_ns+0x8>
  fc:	20 93 22 01 	sts	0x0122, r18
 100:	90 93 23 01 	sts	0x0123, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
 104:	08 95       	ret

00000106 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	84 70       	andi	r24, 0x04	; 4
 110:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
 112:	80 2f       	mov	r24, r16
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 118:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	0f 70       	andi	r16, 0x0F	; 15
 120:	10 70       	andi	r17, 0x00	; 0
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	00 0f       	add	r16, r16
 126:	11 1f       	adc	r17, r17
 128:	8a 95       	dec	r24
 12a:	e1 f7       	brne	.-8      	; 0x124 <lcd_cmd+0x1e>
 12c:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 12e:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
}
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <lcd_init>:
void lcd_exit(void);
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	80 93 24 01 	sts	0x0124, r24
	save=PORTUSED;
	DDRUSED=0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8a bb       	out	0x1a, r24	; 26
 142:	2f e0       	ldi	r18, 0x0F	; 15
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	08 c0       	rjmp	.+16     	; 0x158 <lcd_init+0x20>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 14c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	4c e0       	ldi	r20, 0x0C	; 12
 152:	8c 3c       	cpi	r24, 0xCC	; 204
 154:	94 07       	cpc	r25, r20
 156:	d1 f7       	brne	.-12     	; 0x14c <lcd_init+0x14>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	30 40       	sbci	r19, 0x00	; 0
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	2f 3f       	cpi	r18, 0xFF	; 255
 160:	38 07       	cpc	r19, r24
 162:	91 f7       	brne	.-28     	; 0x148 <lcd_init+0x10>
{	
	save=PORTUSED;
	DDRUSED=0xFF;
	//DDRB=0xFF;
	WaitMs(15);
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 164:	8b b3       	in	r24, 0x1b	; 27
 166:	84 70       	andi	r24, 0x04	; 4
 168:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(0x0F);
 174:	8f e0       	ldi	r24, 0x0F	; 15
 176:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(0x02);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(LINE1);
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
 186:	2f e0       	ldi	r18, 0x0F	; 15
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	08 c0       	rjmp	.+16     	; 0x19c <lcd_init+0x64>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 190:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	4c e0       	ldi	r20, 0x0C	; 12
 196:	8c 3c       	cpi	r24, 0xCC	; 204
 198:	94 07       	cpc	r25, r20
 19a:	d1 f7       	brne	.-12     	; 0x190 <lcd_init+0x58>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	30 40       	sbci	r19, 0x00	; 0
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	2f 3f       	cpi	r18, 0xFF	; 255
 1a4:	38 07       	cpc	r19, r24
 1a6:	91 f7       	brne	.-28     	; 0x18c <lcd_init+0x54>
	lcd_cmd(0x0F);
	lcd_cmd(0x02);
	lcd_cmd(LINE1);
	WaitMs(15);
		
}
 1a8:	08 95       	ret

000001aa <lcd_putchar>:
	PORTUSED=(((cmd&(0x0F))*16));	
	toggleE();
}

void lcd_putchar(unsigned char sig)
{
 1aa:	1f 93       	push	r17
 1ac:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	82 70       	andi	r24, 0x02	; 2
 1b6:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 1b8:	81 2f       	mov	r24, r17
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 1c0:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 1c4:	12 95       	swap	r17
 1c6:	10 7f       	andi	r17, 0xF0	; 240
 1c8:	11 60       	ori	r17, 0x01	; 1
 1ca:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 1cc:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
}
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	82 70       	andi	r24, 0x02	; 2
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	13 c0       	rjmp	.+38     	; 0x214 <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 1ee:	10 31       	cpi	r17, 0x10	; 16
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <lcd_string+0x24>
				lcd_cmd(LINE2);
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 1f8:	88 81       	ld	r24, Y
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 200:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 204:	88 81       	ld	r24, Y
 206:	82 95       	swap	r24
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 20e:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
			k++;
 212:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 214:	e7 01       	movw	r28, r14
 216:	c1 0f       	add	r28, r17
 218:	d1 1d       	adc	r29, r1
 21a:	88 81       	ld	r24, Y
 21c:	88 23       	and	r24, r24
 21e:	39 f7       	brne	.-50     	; 0x1ee <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	08 95       	ret

0000022c <lcd_gotoxy1>:
	lcd_char(T+48);
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
 22c:	80 58       	subi	r24, 0x80	; 128
 22e:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(LINE1+pos);
}
 232:	08 95       	ret

00000234 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
 234:	80 54       	subi	r24, 0x40	; 64
 236:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(LINE2+pos);
}
 23a:	08 95       	ret

0000023c <lcd_char>:
		PORTUSED=((sig&(0x0F))*16)|0x01;
		toggleE();
}

void lcd_char(unsigned char single)
{
 23c:	89 30       	cpi	r24, 0x09	; 9
 23e:	21 f4       	brne	.+8      	; 0x248 <lcd_char+0xc>
	int i;
	if(single =='\t')
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 240:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_putchar>
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	06 c0       	rjmp	.+12     	; 0x254 <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 248:	8a 30       	cpi	r24, 0x0A	; 10
 24a:	21 f4       	brne	.+8      	; 0x254 <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_gotoxy2>
 252:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 254:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_putchar>
 258:	08 95       	ret

0000025a <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 264:	64 e6       	ldi	r22, 0x64	; 100
 266:	0e 94 84 01 	call	0x308	; 0x308 <__udivmodqi4>
 26a:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	8c e9       	ldi	r24, 0x9C	; 156
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	28 9f       	mul	r18, r24
 276:	70 01       	movw	r14, r0
 278:	29 9f       	mul	r18, r25
 27a:	f0 0c       	add	r15, r0
 27c:	38 9f       	mul	r19, r24
 27e:	f0 0c       	add	r15, r0
 280:	11 24       	eor	r1, r1
 282:	c7 01       	movw	r24, r14
 284:	81 0f       	add	r24, r17
 286:	91 1d       	adc	r25, r1
 288:	6a e0       	ldi	r22, 0x0A	; 10
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	0e 94 90 01 	call	0x320	; 0x320 <__divmodhi4>
 290:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 292:	84 2f       	mov	r24, r20
 294:	80 5d       	subi	r24, 0xD0	; 208
 296:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_char>
	lcd_char(T+48);
 29a:	80 2f       	mov	r24, r16
 29c:	80 5d       	subi	r24, 0xD0	; 208
 29e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_char>
	lcd_char(O+48);
 2a2:	10 5d       	subi	r17, 0xD0	; 208
 2a4:	1e 0d       	add	r17, r14
 2a6:	86 ef       	ldi	r24, 0xF6	; 246
 2a8:	9f ef       	ldi	r25, 0xFF	; 255
 2aa:	08 9f       	mul	r16, r24
 2ac:	00 2d       	mov	r16, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	80 2f       	mov	r24, r16
 2b2:	81 0f       	add	r24, r17
 2b4:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_char>
}
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	08 95       	ret

000002c2 <lcd_exit>:
	lcd_cmd(LINE2+pos);
}
		

void lcd_exit(void)
{
 2c2:	80 91 24 01 	lds	r24, 0x0124
 2c6:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=save;
}
 2c8:	08 95       	ret

000002ca <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 2ca:	0a c0       	rjmp	.+20     	; 0x2e0 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 2d0:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	4c e0       	ldi	r20, 0x0C	; 12
 2d8:	2c 3c       	cpi	r18, 0xCC	; 204
 2da:	34 07       	cpc	r19, r20
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <WaitMs+0x6>
 2de:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	a1 f7       	brne	.-24     	; 0x2cc <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 2e4:	08 95       	ret

000002e6 <main>:

#include <avr/io.h>
#include "LCD_mega128.h"

int main(void)
{
 2e6:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>
	
	lcd_init();
	
	lcd_gotoxy1(0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_gotoxy1>

	lcd_string("   ThinkLABS   ");
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>

	lcd_gotoxy2(0);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_gotoxy2>
	
	lcd_string("uNiBoard ver 1.1");
 2fe:	80 e1       	ldi	r24, 0x10	; 16
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0x20>

00000308 <__udivmodqi4>:
 308:	99 1b       	sub	r25, r25
 30a:	79 e0       	ldi	r23, 0x09	; 9
 30c:	04 c0       	rjmp	.+8      	; 0x316 <__udivmodqi4_ep>

0000030e <__udivmodqi4_loop>:
 30e:	99 1f       	adc	r25, r25
 310:	96 17       	cp	r25, r22
 312:	08 f0       	brcs	.+2      	; 0x316 <__udivmodqi4_ep>
 314:	96 1b       	sub	r25, r22

00000316 <__udivmodqi4_ep>:
 316:	88 1f       	adc	r24, r24
 318:	7a 95       	dec	r23
 31a:	c9 f7       	brne	.-14     	; 0x30e <__udivmodqi4_loop>
 31c:	80 95       	com	r24
 31e:	08 95       	ret

00000320 <__divmodhi4>:
 320:	97 fb       	bst	r25, 7
 322:	09 2e       	mov	r0, r25
 324:	07 26       	eor	r0, r23
 326:	0a d0       	rcall	.+20     	; 0x33c <__divmodhi4_neg1>
 328:	77 fd       	sbrc	r23, 7
 32a:	04 d0       	rcall	.+8      	; 0x334 <__divmodhi4_neg2>
 32c:	0c d0       	rcall	.+24     	; 0x346 <__udivmodhi4>
 32e:	06 d0       	rcall	.+12     	; 0x33c <__divmodhi4_neg1>
 330:	00 20       	and	r0, r0
 332:	1a f4       	brpl	.+6      	; 0x33a <__divmodhi4_exit>

00000334 <__divmodhi4_neg2>:
 334:	70 95       	com	r23
 336:	61 95       	neg	r22
 338:	7f 4f       	sbci	r23, 0xFF	; 255

0000033a <__divmodhi4_exit>:
 33a:	08 95       	ret

0000033c <__divmodhi4_neg1>:
 33c:	f6 f7       	brtc	.-4      	; 0x33a <__divmodhi4_exit>
 33e:	90 95       	com	r25
 340:	81 95       	neg	r24
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	08 95       	ret

00000346 <__udivmodhi4>:
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	51 e1       	ldi	r21, 0x11	; 17
 34c:	07 c0       	rjmp	.+14     	; 0x35c <__udivmodhi4_ep>

0000034e <__udivmodhi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a6 17       	cp	r26, r22
 354:	b7 07       	cpc	r27, r23
 356:	10 f0       	brcs	.+4      	; 0x35c <__udivmodhi4_ep>
 358:	a6 1b       	sub	r26, r22
 35a:	b7 0b       	sbc	r27, r23

0000035c <__udivmodhi4_ep>:
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	5a 95       	dec	r21
 362:	a9 f7       	brne	.-22     	; 0x34e <__udivmodhi4_loop>
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
